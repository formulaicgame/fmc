package fmc:api;

// These structs are implemented in the glam crate
interface math {
    record vec3 {
        x: f32,
        y: f32,
        z: f32
    }

    /// IM DOCUMENTING
    record i-vec3 {
        x: s32,
        y: s32,
        z: s32
    }

    // TODO: Unfortunate ergonomics, include glam in the repo and gut the Quat?
    //       Try with v128 "vector type"
    //
    // We use the f64 version instead because the f32 version is implemented with simd and so
    // doesn't have any fields.
    record d-quat {
        x: f64,
        y: f64,
        z: f64,
        w: f64,
    }
}

interface transform {
    use math.{vec3, d-quat};

    record transform {
        translation: vec3,
        rotation: d-quat,
        scale: vec3
    }
}

world plugin {
    use math.{vec3, i-vec3, d-quat};
    use transform.{transform};

    type block-id = u16;
    type block-state = u16;
    type model-id = u32;
    type entity = u64;

    // TODO: The client can map keys, is it best to handle this only host side? Eventually the wasm
    // should handle the interfaces which means it needs complete access to the keyboard anyways.
    enum key {
       key-w, 
       key-a, 
       key-s, 
       key-d, 
       shift,
       control,
       space
    }

    record keyboard-key {
        /// Physical key code
        key: key,
        /// True if it was released, false if pressed
        released: bool,
        /// If the button has been held down for some OS specified period
        repeat: bool
    }

    export init-plugin: func();
    export set-update-frequency: func() -> option<f32>;
    export update: func();
    export handle-server-data: func(data: list<u8>);

    import log: func(msg: string);

    import delta-time: func() -> f32;

    import get-player-transform: func() -> transform;
    import get-camera-transform: func() -> transform;

    import set-player-transform: func(transform: transform);
    import set-camera-transform: func(transform: transform);

    import keyboard-input: func() -> list<keyboard-key>;

    /// Get the id of a block in the world map
    import get-block: func(block-position: i-vec3) -> option<block-id>;
    /// Get the block state of a block in the world map
    import get-block-state: func(block-position: i-vec3) -> option<block-state>;

    /// Get the models inside the aabb defined by min and max
    import get-models: func(min: vec3, max: vec3) -> list<model-id>;
    /// Get the transform of a model
    import get-model-transform: func(model-id: model-id) -> transform;
}
